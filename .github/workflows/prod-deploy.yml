# ~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".

name: prod-deploy
on:
  push:
    branches:
      - main
  workflow_dispatch: {}
jobs:
  find_artifact:
    name: Find Build Artifact
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: read
    steps:
      - name: Find build artifact
        id: find-artifact
        uses: actions/github-script@v7
        with:
          script: "

            \              // First, find the build workflow

            \              const workflows = await github.rest.actions.listRepoWorkflows({

            \                owner: context.repo.owner,

            \                repo: context.repo.repo,

            \              });

            \             \ 

            \              const buildWorkflow = workflows.data.workflows.find(w => w.name === 'build');

            \              if (!buildWorkflow) {

            \                throw new Error('Could not find build workflow');

            \              }


            \              // Get workflow runs for the current commit

            \              const runs = await github.rest.actions.listWorkflowRuns({

            \                owner: context.repo.owner,

            \                repo: context.repo.repo,

            \                workflow_id: buildWorkflow.id,

            \                commit_sha: context.sha,

            \              });


            \              if (runs.data.workflow_runs.length === 0) {

            \                throw new Error('No build workflow run found for commit ' + context.sha);

            \              }


            \              // Find the successful run

            \              const successRun = runs.data.workflow_runs.find(r => r.status === 'completed' && r.conclusion === 'success');

            \              if (!successRun) {

            \                throw new Error('No successful build found for commit ' + context.sha);

            \              }


            \              // List artifacts for the successful run

            \              const artifacts = await github.rest.actions.listWorkflowRunArtifacts({

            \                owner: context.repo.owner,

            \                repo: context.repo.repo,

            \                run_id: successRun.id,

            \              });


            \              const cdkArtifact = artifacts.data.artifacts.find(a => a.name === `cdk-out-${context.sha}`);

            \              if (!cdkArtifact) {

            \                throw new Error('No CDK artifact found for commit ' + context.sha);

            \              }


            \              console.log('Found CDK artifact:', cdkArtifact.name);

            \              return cdkArtifact.name;

            \            "
      - name: Set artifact name
        run: echo "artifact-name=${{ steps.find-artifact.outputs.result }}" >> $GITHUB_OUTPUT
  deploy_production:
    name: Deploy to Production
    needs: find_artifact
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          audience: sts.amazonaws.com
          role-to-assume: arn:aws:iam::${{ secrets.PROD_AWS_ACCOUNT_ID }}:role/github-actions-deployer
      - name: Download CDK artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.find_artifact.outputs.artifact-name }}
          path: cdk.out/
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ needs.find_artifact.outputs.run-id }}
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
      - name: Install dependencies
        run: bun install --frozen-lockfile
      - name: Deploy to Production
        run: bunx cdk deploy 'prod/*' --app cdk.out --require-approval never
      - name: Get Production URL
        id: get-prod-url
        run: |-
          URL=$(bunx cdk --app cdk.out --outputs-file prod-outputs.json deploy --require-approval never 2>/dev/null && cat prod-outputs.json | jq -r '.[] | select(.CloudFrontUrl) | .CloudFrontUrl' || echo "Deployment completed")
          echo "PROD_URL=$URL" >> $GITHUB_OUTPUT
      - name: Notify deployment success
        run: |-
          echo "ðŸŽ‰ Production deployment successful!"
          echo "URL: ${{ steps.get-prod-url.outputs.PROD_URL }}"
