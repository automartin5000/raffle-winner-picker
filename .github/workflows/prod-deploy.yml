# ~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".

name: prod-deploy
on:
  pull_request_target:
    types:
      - closed
    branches:
      - main
jobs:
  deploy_production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      actions: read
      pull-requests: read
    environment: production
    outputs:
      artifact_path: ${{ steps.find-artifact.outputs.artifact-name }}
    if: github.event.pull_request.merged == true
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Find build artifact
        id: find-artifact
        uses: actions/github-script@v7
        with:
          script: "

            \              const headSha = context.payload.pull_request.head.sha;

            \              const mergeCommitSha = context.payload.pull_request.merge_commit_sha;

            \             \ 

            \              console.log('Looking for builds:', {

            \                headSha,

            \                mergeCommitSha,

            \                pr: context.payload.pull_request.number,

            \                title: context.payload.pull_request.title

            \              });

            \             \ 

            \              // Find the build workflow

            \              const workflows = await github.rest.actions.listRepoWorkflows({

            \                owner: context.repo.owner,

            \                repo: context.repo.repo,

            \              });

            \             \ 

            \              const buildWorkflow = workflows.data.workflows.find(w => w.name === 'build');

            \              if (!buildWorkflow) {

            \                throw new Error('Could not find build workflow');

            \              }

            \             \ 

            \              // Get workflow runs for the target commit

            \              const runs = await github.rest.actions.listWorkflowRuns({

            \                owner: context.repo.owner,

            \                repo: context.repo.repo,

            \                workflow_id: buildWorkflow.id,

            \              });

            \             \ 

            \              console.log('Found workflow runs:', runs.data.workflow_runs.map(r =>\ 

            \                `${r.head_sha} (${r.status})`).join(', '));


            \              // Find the successful run for our target commit

            \              const successRun = runs.data.workflow_runs.find(r =>\ 

            \                (r.head_sha === headSha || r.head_sha === mergeCommitSha) &&\ 

            \                r.status === 'completed' &&\ 

            \                r.conclusion === 'success'

            \              );

            \             \ 

            \              if (!successRun) {

            \                throw new Error(

            \                  `No successful build found for PR #${context.payload.pull_request.number}\\n` +

            \                  `Head commit: ${headSha}\\n` +

            \                  `Merge commit: ${mergeCommitSha}\\n` +

            \                  `Available runs: ${runs.data.workflow_runs.map(r => `${r.head_sha} (${r.status})`).join(', ')}`

            \                );

            \              }

            \             \ 

            \              console.log('Found successful build run:', successRun.head_sha);


            \              // List artifacts for the successful run

            \              const artifacts = await github.rest.actions.listWorkflowRunArtifacts({

            \                owner: context.repo.owner,

            \                repo: context.repo.repo,

            \                run_id: successRun.id,

            \              });


            \              // Look for artifacts with either the head SHA or merge commit SHA

            \              const cdkArtifact = artifacts.data.artifacts.find(a =>\ 

            \                a.name === `cdk-out-${headSha}` ||\ 

            \                a.name === `cdk-out-${mergeCommitSha}`

            \              );

            \             \ 

            \              if (!cdkArtifact) {

            \                throw new Error(

            \                  `No CDK artifact found. Expected cdk-out-${headSha} or cdk-out-${mergeCommitSha}\\n` +

            \                  `Available artifacts: ${artifacts.data.artifacts.map(a => a.name).join(', ')}`

            \                );

            \              }


            \              console.log('Found CDK artifact:', cdkArtifact.name);

            \              return JSON.stringify({

            \                artifactName: cdkArtifact.name,

            \                runId: successRun.id

            \              });

            \            "
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          audience: sts.amazonaws.com
          role-to-assume: arn:aws:iam::${{ secrets.PROD_AWS_ACCOUNT_ID }}:role/github-actions-deployer
      - name: Download CDK artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ fromJSON(steps.find-artifact.outputs.result).artifactName }}
          path: cdk.out/
          run-id: ${{ fromJSON(steps.find-artifact.outputs.result).runId }}
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
      - name: Install dependencies
        run: bun install --frozen-lockfile
      - name: Deploy to Production
        run: pj deploy 'prod/*' --app cdk.out --require-approval never
      - name: Get Production URL
        id: get-prod-url
        run: |-
          URL=$(bunx cdk --app cdk.out --outputs-file prod-outputs.json deploy --require-approval never 2>/dev/null && cat prod-outputs.json | jq -r '.[] | select(.CloudFrontUrl) | .CloudFrontUrl' || echo "Deployment completed")
          echo "PROD_URL=$URL" >> $GITHUB_OUTPUT
      - name: Notify deployment success
        run: |-
          echo "ðŸŽ‰ Production deployment successful!"
          echo "URL: ${{ steps.get-prod-url.outputs.PROD_URL }}"
          echo "Artifact: ${{ fromJSON(steps.find-artifact.outputs.result).artifactName }}"
